"1.0b7.2 "(created 2011/08/05 11:03:59)"

loadplugins '\.(js|penta)$'
group user
set showtabline=never

" vim: set ft=pentadactyl:

javascript <<EOF

  function getPref(name, branch){
    if(typeof(branch) == 'undefined')
      branch = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("");
    try { return branch.getBoolPref(name); }catch(e){}
    try { return branch.getIntPref(name); }catch(e){}
    try { return branch.getCharPref(name); }catch(e){}
    try { return branch.getComplexValue(name, Components.interfaces.nsISupportsString).data; }catch(e){}
    try { return branch.getComplexValue(name, Components.interfaces.nsIRelativeFilePref).file; }catch(e){}
    return undefined;
  }

  function setPref(name, value, branch){
    if(typeof(branch) == 'undefined')
      branch = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService).getBranch("");

    if(typeof(value) == 'boolean'){
      branch.setBoolPref(name, value);
      return
    }
    if(typeof(value) == 'number'){
      branch.setIntPref(name, value);
      return
    }
    if(typeof(value) == 'string'){
      branch.setCharPref(name, value);
      return
    }
    alert("type of " + value + "not found");
    return
  }


  setPref('extentions.siphon.email'             , 'mickael.kerbrat@gmail.com'); //type 32
  setPref('extentions.siphon.enable_recommended', false                      ); // type 0
  setPref('extentions.siphon.hide_status_bar', true);

  //pass = siphon


  var prefs = Components.classes["@mozilla.org/preferences-service;1"].getService(Components.interfaces.nsIPrefService);
  //prefs = prefs.getBranch("");

  //alert(prefs.getChildList("", {}));

  //prefs = prefs.getBranch("extentions.");

  //prefs.setBoolPref("", "value");


  var myPrefObserver = {
    register: function(){
      var prefService = Components.classes["@mozilla.org/preferences-service;1"]
                                  .getService(Components.interfaces.nsIPrefService);

      this._branch = prefService.getBranch("extensions.");
      this._branch.QueryInterface(Components.interfaces.nsIPrefBranch2);
      this._branch.addObserver("", this, false);
    },
    unregister: function(){
      if (!this._branch) return;
      this._branch.removeObserver("", this);
    },

    observe: function(aSubject, aTopic, aData){
      if(aTopic != "nsPref:changed") return;

      if(aData == 'dactyl.restore.browser.startup.page') return;
      if(aData == 'dactyl.saved.browser.startup.page') return;
      if(aData == 'siphon.last_sync') return;
      if(aData == 'siphon.addon_status') return;

      //alert(aData + " : " + getPref(aData, this._branch));
    }
  }
  myPrefObserver.register();



//// do not define the same version twice
//function PrefsWrapper1(aRoot){
//  const CI = Components.interfaces;
//  this.prefSvc = Components.classes["@mozilla.org/preferences-service;1"].getService(CI.nsIPrefService);
//  this.prefSvc.QueryInterface(CI.nsIPrefBranch);
//  this.branch = this.prefSvc.getBranch(aRoot);
//
//  this.prefSvc.QueryInterface(CI.nsIPrefBranchInternal);
//  this.branch.QueryInterface(CI.nsIPrefBranchInternal);
//
//  // "inherit" from nsIPrefBranch, re-assembling __proto__ chain as follows:
//  //    this, nsIPrefBranch, PrefsWrapper1.prototype, Object.prototype
//  this.branch.__proto__ = PrefsWrapper1.prototype;
//  this.__proto__ = this.branch;
//
//  // Create "get*PrefDef" methods, which return specified default value
//  // when an exception occurs - similar to nsPreferences.
//  if(!("getIntPrefDef" in PrefsWrapper1.prototype)) {
//    var types = ["Int", "Char", "Bool", "Unichar", "File"];
//    for(var i in types) {
//      PrefsWrapper1.prototype["get" + types[i] + "PrefDef"] = new Function(
//        "aPrefName", "aDefValue",
//          "try { return this.get" + types[i] + "Pref(aPrefName);\n" + 
//          "} catch(e) {} return aDefValue;");
//    }
//  }
//}
//
//PrefsWrapper1.prototype = {
//  getSubBranch: function(aSubpath){
//    return new PrefsWrapper1(this.branch.root + aSubpath);
//  },
//
//  // unicode strings
//  getUnicharPref: function(aPrefName){
//    return this.branch.getComplexValue(aPrefName,
//      Components.interfaces.nsISupportsString).data;
//  },
//  setUnicharPref: function(aPrefName, aValue){
//    var str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
//    str.data = aValue;
//    this.branch.setComplexValue(aPrefName, Components.interfaces.nsISupportsString, str);
//  },
//
//  // for strings with default value stored in locale's .properties file
//  getLocalizedUnicharPref: function(aPrefName){
//    return this.branch.getComplexValue(aPrefName, Components.interfaces.nsIPrefLocalizedString).data;
//  },
//
//  // store nsILocalFile in prefs
//  setFilePref: function(aPrefName, aValue){
//    this.branch.setComplexValue(aPrefName, Components.interfaces.nsILocalFile, aValue);
//  },
//  getFilePref: function(aPrefName) {
//    return this.branch.getComplexValue(aPrefName, Components.interfaces.nsILocalFile);
//  },
//
//  // aRelTo - relative to what directory (f.e. "ProfD")
//  setRelFilePref: function(aPrefName, aValue, aRelTo){
//    var relFile = Components.classes["@mozilla.org/pref-relativefile;1"].createInstance(Components.interfaces.nsIRelativeFilePref);
//    relFile.relativeToKey = aRelTo;
//    relFile.file = aValue;
//    this.branch.setComplexValue(aPrefName, Components.interfaces.nsIRelativeFilePref, relFile);
//  },
//  getRelFilePref: function(aPrefName){
//    return this.branch.getComplexValue(aPrefName, Components.interfaces.nsIRelativeFilePref).file;
//  },
//
//  // don't throw an exception if the pref doesn't have a user value
//  clearUserPrefSafe: function(aPrefName){
//    try {
//      this.branch.clearUserPref(aPrefName);
//    } catch(e) {}
//  }
//}

EOF
